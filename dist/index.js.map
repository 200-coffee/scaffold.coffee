{"version":3,"sources":["../src/index.ts","../src/commands/scaffold.ts","../src/utils/logger.ts","../src/prompts/scaffold.ts","../src/utils/registry.ts","../src/utils/package.ts","../src/validation/scaffold.ts","../src/templates/nextjs/typescript/index.ts","../src/utils/dir.ts","../src/templates/nextjs/generic/config/components-json.ts","../src/templates/nextjs/generic/config/gitingore.ts","../src/templates/nextjs/generic/config/next-config.ts","../src/templates/nextjs/generic/config/package-json.ts","../src/templates/nextjs/generic/config/postcss-config.ts","../src/templates/nextjs/generic/config/tailwind-config.ts","../src/templates/nextjs/typescript/config/next-env.ts","../src/templates/nextjs/typescript/config/tsconfig-json.ts","../src/templates/nextjs/typescript/config/index.ts","../src/templates/nextjs/generic/src/index.ts","../src/templates/nextjs/generic/src/app/index.ts","../src/templates/nextjs/generic/src/app/page.ts","../src/templates/nextjs/generic/src/app/layout.ts","../src/templates/nextjs/generic/src/components/index.ts","../src/templates/nextjs/generic/src/components/theme.ts","../src/templates/nextjs/generic/src/styles/index.ts","../src/templates/nextjs/generic/src/styles/globals.ts","../src/templates/nextjs/generic/src/hooks/index.ts","../src/templates/nextjs/generic/src/layouts/index.ts","../src/templates/nextjs/generic/src/server/index.ts","../src/templates/nextjs/generic/src/types/index.ts","../src/templates/nextjs/generic/src/ui/index.ts","../src/templates/nextjs/generic/src/ui/branding.ts","../src/templates/nextjs/javascript/index.ts","../src/templates/nextjs/javascript/config/index.ts","../src/templates/index.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport { scaffold } from '@/commands/scaffold';\nimport { getPackageInfo } from './utils/package';\n\nconst init = async (): Promise<void> => {\n  const packageInfo = await getPackageInfo();\n\n  const program = new Command()\n    .name(packageInfo.name || 'Scaffold.Coffee')\n    .description(packageInfo.description || 'A simple scaffolding CLI for generating your next project')\n    .version(packageInfo.version || 'Unknown Version', '-v, --version', 'display the version number');\n\n  program.addCommand(scaffold);\n\n  program.parse();\n};\n\ninit();","import { z } from 'zod';\nimport { Command } from 'commander';\nimport { logger } from '@/utils/logger';\nimport { resolve, dirname } from 'path';\nimport { writeFileSync, readFileSync, existsSync } from 'fs';\nimport { fileURLToPath } from 'url';\n\nimport { useScaffoldPrompt } from '@/prompts/scaffold';\nimport { tScaffoldAnswers } from '@/types/answers';\nimport { handleTemplate } from '@/templates';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst initOptionsSchema = z.object({\n  cwd: z.string(),\n  yes: z.boolean(),\n  defaults: z.boolean(),\n});\n\nconst ANSWERS_FILE_PATH = resolve(__dirname, 'storedAnswers.json');\n\nconst storeAnswers =  (answers: tScaffoldAnswers): void => {\n  writeFileSync(ANSWERS_FILE_PATH, JSON.stringify(answers, null, 2));\n};\n\nconst loadStoredAnswers = (): tScaffoldAnswers | null => {\n  if (!existsSync(ANSWERS_FILE_PATH)) return null;\n  \n  const data = readFileSync(ANSWERS_FILE_PATH, 'utf-8');\n  return JSON.parse(data) as tScaffoldAnswers;\n};\n\nexport const scaffold = new Command()\n  .name('scaffold')\n  .description('Scaffold a new project')\n  .option('-y, --yes', 'skip confirmation prompt.', false)\n  .option('-d, --defaults,', 'use default configuration.', false)\n  .option(\n    '-c, --cwd <cwd>',\n    'the working directory. defaults to the current directory.',\n    process.cwd(),\n  )\n  .action(async (opts) => {\n    const options = initOptionsSchema.parse(opts);\n\n    const scriptRunningPath = options.cwd ? resolve(options.cwd) : process.cwd();\n\n    logger.welcome();\n\n    const storedAnswers = loadStoredAnswers();\n    const answers: tScaffoldAnswers = await useScaffoldPrompt(scriptRunningPath, storedAnswers, options.yes);\n\n    storeAnswers(answers);\n\n    logger.message('');\n\n    await handleTemplate(scriptRunningPath, answers);\n  });","import chalk from 'chalk';\n\nexport const logger = {\n  error(...args: unknown[]) {\n    console.log(chalk.red(...args));\n  },\n  warn(...args: unknown[]) {\n    console.log(chalk.yellow(...args));\n  },\n  info(...args: unknown[]) {\n    console.log(chalk.cyan(...args));\n  },\n  success(...args: unknown[]) {\n    console.log(chalk.green(...args));\n  },\n  message(...args: unknown[]) {\n    console.log(chalk.visible(...args));\n  },\n  break() {\n    console.log('');\n  },\n  welcome() {\n    console.log(\n      chalk.blueBright(`                                 \n _____         ___ ___     _   _ \n|   __|___ ___|  _|  _|___| |_| |\n|__   |  _| .'|  _|  _| . | | . |\n|_____|___|__,|_| |_| |___|_|___|\n                                 `),\n    );\n    console.log('');\n  },\n};","import { tScaffoldAnswers } from '@/types/answers';\nimport type { Config } from 'cosmiconfig';\n\nimport chalk from 'chalk';\nimport type { tOption, tRegistry } from '@/types/registry';\nimport { getRegistryFrameworks } from '@/utils/registry';\nimport prompts from 'prompts';\nimport { validatePackageName } from '@/validation/scaffold';\nimport { existsSync, readdirSync } from 'fs';\nimport { logger } from '@/utils/logger';\n\nexport const useScaffoldPrompt = async  (\n  cwd: string,\n  defaultConfig: Config | null = null,\n  skip = false,\n): Promise<tScaffoldAnswers> => {\n  const highlight = (text: string) => chalk.blueBright(text);\n\n  const currentDirName: string = cwd.split(/[\\\\/]/).pop() ?? '';\n  let newDir = cwd;\n  let newDirName = currentDirName;\n\n  const updateState = (name: string): void => {\n    const trimmedName = name.trim();\n    newDir = trimmedName && trimmedName !== '.' ? `${cwd}/${trimmedName}` : cwd;\n    newDirName = trimmedName && trimmedName !== '.' ? trimmedName : currentDirName;\n  };\n\n  const registry: tRegistry = await getRegistryFrameworks();\n\n  if (skip) {\n    return {\n      name: defaultConfig?.name ?? 'my-app',\n      overwrite: false,\n      framework: registry.frameworks[0].name,\n      language: registry.frameworks[0].languages[0].name,\n      styling: registry.styling[0].name,\n      testing: registry.testing[0].name,\n      ui: registry.ui[0].name,\n      git: true,\n      install: true,\n    };\n  }\n\n  return await prompts([\n    {\n      type: 'text',\n      name: 'name',\n      message: `What is the ${highlight('name')} of your project?`,\n      initial: defaultConfig?.name ? defaultConfig?.name ?? 'my-app' : 'my-app',\n      validate: (name: string) =>  validatePackageName(name, currentDirName),\n      onState: ({ value }) => updateState(value),\n    },\n    {\n      type: () => (!existsSync(newDir) || !readdirSync(newDir)?.length ? null : 'toggle'),\n      name: 'overwrite',\n      message: () => (newDir === cwd ? 'Directory is not empty. Do you want to overwrite it?' : `Directory ${newDirName} is not empty. Do you want to overwrite it?`),\n      active: 'yes',\n      inactive: 'no',\n      initial: defaultConfig?.overwrite ? defaultConfig?.overwrite ?? true : true,\n    },\n    {\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      type: (_, { overwrite } = {}) => {\n        if (overwrite === false) {\n          logger.error('Please choose an empty directory');\n          process.exit(1);\n        }\n        return null;\n      },\n      name: 'overwriteChecker',\n    },\n    {\n      type: 'select',\n      name: 'framework',\n      message: `Choose a ${highlight('framework')} for your project`,\n      choices: registry.frameworks.map((framework) => ({\n        title: framework.label,\n        value: framework,\n      })),\n      initial: defaultConfig?.framework?.name ? registry.frameworks.findIndex((framework) => framework.name === defaultConfig?.framework?.name) ?? 0 : 0,\n    },\n    {\n      type: (framework) => (framework && framework.languages ? 'select' : null),\n      name: 'language',\n      message: `Choose a ${highlight('language')} for your project`,\n      choices: (framework) => framework.languages.map((language: tOption) => ({\n        title: language.label,\n        value: language.name,\n      })),\n      initial: (framework) => defaultConfig?.language ? framework.languages.findIndex((language: tOption) => language.name === defaultConfig?.language) ?? 0 : 0,\n    },\n    {\n      type: 'select',\n      name: 'styling',\n      message: `Choose a ${highlight('styling')} for your project`,\n      choices: registry.styling.map((styling) => ({\n        title: styling.label,\n        value: styling.name,\n      })),\n      initial: defaultConfig?.styling ? registry.styling.findIndex((styling) => styling.name === defaultConfig?.styling) ?? 0 : 0,\n    },\n    {\n      type: 'select',\n      name: 'testing',\n      message: `Choose a ${highlight('testing')} framework for your project`,\n      choices: registry.testing.map((testing) => ({\n        title: testing.label,\n        value: testing.name,\n      })),\n      initial: defaultConfig?.testing ? registry.testing.findIndex((testing) => testing.name === defaultConfig?.testing) ?? 0 : 0,\n    },\n    {\n      type: 'select',\n      name: 'ui',\n      message: `Choose a ${highlight('UI')} library for your project`,\n      choices: registry.ui.map((ui) => ({\n        title: ui.label,\n        value: ui.name,\n      })),\n      initial: defaultConfig?.ui ? registry.ui.findIndex((ui) => ui.name === defaultConfig?.ui) ?? 0 : 0,\n    },\n    {\n      type: 'toggle',\n      name: 'git',\n      message: `Initialize a ${highlight('git')} repository?`,\n      initial: defaultConfig?.git ? defaultConfig?.git ?? true : true,\n      active: 'Yes',\n      inactive: 'No',\n    },\n    {\n      type: 'toggle',\n      name: 'install',\n      message: `Install ${highlight('dependencies')} after scaffolding?`,\n      initial: defaultConfig?.install ? defaultConfig?.install ?? true : true,\n      active: 'Yes',\n      inactive: 'No',\n    }\n  ]);\n};","import path from 'path';\nimport {  dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport type { tRegistry } from '@/types/registry';\nimport { getPackageInfo } from './package';\nimport { promises } from 'fs';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nconst fetchRegistry = async (registryPath: string): Promise<tRegistry> => {\n  const res = await fetch('https://registry.200.coffee/registry');\n  const registry = await res.json();\n\n  await promises.writeFile(registryPath, JSON.stringify(registry, null, 2));\n  return registry;\n};\n\nexport const getRegistryFrameworks = async (): Promise<tRegistry> => {\n  let registry: tRegistry;\n  const { version } = await getPackageInfo();\n  const registryPath: string = path.join(__dirname, '/.', `registry-${version}.json`);\n\n  // check if the file exists\n  await promises.access(registryPath).catch(async() => {\n    registry = await fetchRegistry(registryPath);\n    return registry;\n  });\n\n  // if the file exists, read it\n  if (registryPath) {\n    const data = await promises.readFile(registryPath, 'utf-8');\n    registry = JSON.parse(data);\n    return registry;\n  }\n\n  registry = await fetchRegistry(registryPath);\n  return registry;\n};","import path from 'path';\nimport {  dirname } from 'path';\nimport { fileURLToPath } from 'url';\nimport fs from 'fs';\n\nimport type { tPackage } from '@/types/package';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport const getPackageInfo = async (): Promise<tPackage> => {\n  const packagePath = path.join(__dirname, '..', 'package.json');\n  const packageJson = JSON.parse(await fs.readFileSync(packagePath, 'utf-8'));\n\n  return {\n    name: packageJson.name || 'Scaffold.Coffee',\n    description: packageJson.description || 'A simple scaffolding tool',\n    version: packageJson.version || '1.0.0',\n  };\n};","import { string } from 'yup';\n\nexport const validatePackageName = (name: string, currentDirName: string): boolean => {\n  if(name.trim() === '.') {\n    return string().matches(/^[a-z0-9-]+$/).isValidSync(currentDirName);\n  }\n  return string().matches(/^[a-z0-9-]+$/).isValidSync(name);\n};","import ora, { type Ora } from 'ora';\nimport chalk from 'chalk';\n\nimport { tScaffoldAnswers } from '@/types/answers';\nimport { createDir } from '@/utils/dir';\nimport { handleScaffoldConfig } from './config';\nimport { handleScaffoldSrc } from '../generic/src';\nimport { promisify } from 'util';\nimport { exec as execCallback } from 'child_process';\nimport { logger } from '@/utils/logger';\n\nexport const scaffoldNextjsTypescript = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  const spinner: Ora = ora(`Setting up ${chalk.blueBright('Next.js')} with ${chalk.blueBright('TypeScript')}`).start();\n\n  const dir = await createDir(cwd, answers.name).catch((err) => {\n    spinner.fail('Failed to create directory');\n    throw err;\n  });\n\n  if(!dir) {\n    spinner.fail('Failed to create directory');\n    throw new Error('Failed to create directory');\n  }\n\n  const userAnswers = {\n    ...answers,\n    name: dir?.split('/')?.pop()?.trim(),\n  };\n\n  await handleScaffoldConfig(dir, userAnswers).catch((err) => {\n    spinner.fail('Failed to scaffold config');\n    throw err;\n  });\n  await handleScaffoldSrc(dir, userAnswers).catch((err) => {\n    spinner.fail('Failed to scaffold src');\n    throw err;\n  });\n\n  if(answers.install) {\n    spinner.text = 'Installing dependencies';\n    const execPromise = promisify(execCallback);\n\n    const checkPackageManager = async (): Promise<string> => {\n      try {\n        await execPromise('yarn --version');\n        return 'yarn install';\n      } catch {\n        try {\n          await execPromise('pnpm --version');\n          return 'pnpm install';\n        } catch {\n          try {\n            await execPromise('bun --version');\n            return 'bun install';\n          } catch {\n            return 'npm install';\n          }\n        }\n      }\n    };\n\n    const installCommand = await checkPackageManager();\n    await execPromise(installCommand, { cwd: dir });\n    spinner.succeed('Dependencies installed');\n\n    if(!answers.git) {\n      logger.message('');\n    }\n  }\n\n  if (answers.git) {\n    const execPromise = promisify(execCallback);\n\n    spinner.text = 'Initializing git';\n    await execPromise('git init', { cwd: dir });\n    spinner.succeed('Git initialized');\n\n    logger.message('');\n  }\n\n  spinner.succeed(`${chalk.blueBright('Next.js')} with ${chalk.blueBright('TypeScript')} setup complete`);\n};","import { existsSync, mkdirSync, readdirSync, rmSync } from 'fs';\n\n\nexport const createDir = async (\n  cwd: string,\n  name: string,\n): Promise<string> => {\n  const dir = name !== '.' ? `${cwd}/${name}` : cwd;\n\n  if (!existsSync(dir)) {\n    mkdirSync(dir);\n    return dir;\n  }\n\n  if (readdirSync(dir).length) {\n    rmSync(dir, { recursive: true });\n    mkdirSync(dir);\n  }\n\n  return dir;\n};","import { promises } from 'fs';\n\nimport type { tScaffoldAnswers } from '@/types/answers';\n\nexport const scaffoldComponentsJson = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  let componentsJson = {};\n\n  if(answers.ui === 'none') {\n    return;\n  }\n\n  switch (answers.ui) {\n  case 'shadcn-ui':\n    componentsJson = {\n      '$schema': 'https://ui.shadcn.com/schema.json',\n      'style': 'default',\n      'rsc': true,\n      'tsx': answers.language === 'typescript',\n      'tailwind': {\n        'config': `tailwind.config.${answers.language === 'typescript' ? 'ts' : 'js'}`,\n        'css': `styles/globals.${answers.styling === 'css' ? 'css' : 'scss'}`,\n        'baseColor': 'slate',\n        'cssVariables': false\n      },\n      'aliases': {\n        'components': '@/shadcn',\n        'utils': '@/shadcn/utils'\n      }\n    };\n\n    await promises.writeFile(\n      `${cwd}/components.json`,\n      JSON.stringify(componentsJson, null, 2),\n    );\n    break;\n  default:\n    return void 0;\n  }\n};","import { promises } from 'fs';\n\nexport const scaffoldGitIgnore = async (\n  cwd: string,\n): Promise<void> => {\n  const gitIgnore = `# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.\n\n# dependencies\n/node_modules\n/.pnp\n.pnp.js\n.yarn/install-state.gz\n\n# testing\n/coverage\n\n# next.js\n/.next/\n/out/\n\n# production\n/build\n\n# misc\n.DS_Store\n*.pem\n\n# debug\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# local env files\n.env*.local\n\n# vercel\n.vercel\n\n# typescript\n*.tsbuildinfo\nnext-env.d.ts\n`;\n\n  await promises.writeFile(`${cwd}/.gitignore`, gitIgnore);\n};","import { promises } from 'fs';\n\nexport const scaffoldNextConfig = async (\n  cwd: string,\n  typescript: boolean,\n): Promise<void> => {\n  const nextConfig = `${typescript ? `/** @type {import('next').NextConfig} */\n` : ''}const nextConfig = {};\n\nexport default nextConfig;\n`;\n\n  await promises.writeFile(`${cwd}/next.config.mjs`, nextConfig);\n};","import { promises } from 'fs';\n\nimport type { tScaffoldAnswers } from '@/types/answers';\n\nexport const scaffoldPackageJson = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  const testing =  (): {\n    test: string;\n    'test:watch': string;\n  } | null => {\n    switch (answers.testing) {\n    case 'jest':\n      return {\n        test: 'jest',\n        'test:watch': 'jest --watchAll',\n      };\n    case 'vitest':\n      return {\n        test: 'vitest run',\n        'test:watch': 'vitest --watch',\n      };\n    default:\n      return null;\n    }\n  };\n  const testScript = testing();\n\n  const packageJson = {\n    name: answers.name || 'nextjs-typescript-by-scaffold-coffee',\n    version: '0.1.0',\n    description: 'Next.js project scaffolded by Scaffold.Coffee',\n    private: true,\n    scripts: {\n      build: 'next build',\n      dev: 'next dev',\n      'dev:turbo': 'next dev --turbo',\n      start: 'next start',\n      lint: 'next lint',\n      'lint:fix': 'next lint --fix',\n      ...(testScript ? testScript : {}),\n    },\n    dependencies: {\n      clsx: '^2',\n      geist: '^1',\n      next: '^14',\n      'next-themes': '^0',\n      react: '^18',\n      'react-dom': '^18',\n    },\n    devDependencies: {\n      ...(answers.testing === 'vitest' ? {'@testing-library/react': '^16',} : {}),\n      ...(answers.language === 'typescript' ? {\n        '@types/node': '^22',\n        '@types/react': '^18',\n        '@types/react-dom': '^18',\n        '@typescript-eslint/eslint-plugin': '^8',\n        '@typescript-eslint/parser': '^8',\n      } : {}),\n      ...(answers.testing === 'vitest' ? {'@vitejs/plugin-react': '^4',} : {}),\n      autoprefixer: '^10',\n      eslint: '^8',\n      'eslint-config-next': '^14',\n      'eslint-config-prettier': '^9',\n      'eslint-formatter-pretty': '^6',\n      'eslint-plugin-import': '^2',\n      'eslint-plugin-prettier': '^5',\n      ...(answers.testing === 'jest' ? {jest: '^27'} : {}),\n      jsdom: '^21',\n      postcss: '^8',\n      prettier: '^3',\n      ...(answers.styling === 'tailwindcss' ? {'prettier-plugin-tailwindcss': '^0'} : {}),\n      ...(answers.styling !== 'css' ? {sass: '^1'} : {}),\n      ...(answers.styling === 'tailwindcss' ? {tailwindcss: '^3'} : {}),\n      ...(answers.language === 'typescript' ? {typescript: '^5'} : {}),\n      ...(answers.testing === 'vitest' ? {vite: '^5', vitest: '^2'} : {}),\n    },\n  };\n\n  await promises.writeFile(\n    `${cwd}/package.json`,\n    JSON.stringify(packageJson, null, 2),\n  );\n};","import { promises } from 'fs';\n\nexport const scaffoldPostcssConfig = async (\n  cwd: string,\n  tailwind: boolean,\n): Promise<void> => {\n  const postcssConfig = `module.exports = {\n  plugins: {\n    ${tailwind ? 'tailwindcss: {},' : ''}\n    autoprefixer: {},\n  },\n};`;\n\n  await promises.writeFile(`${cwd}/postcss.config.js`, postcssConfig);\n};","import { promises } from 'fs';\n\nexport const scaffoldTailwind = async (cwd: string, tailwind: boolean, typescript: boolean): Promise<void> => {\n  if(!tailwind) return;\n  \n  const tailwindConfig = `${typescript ? `import type { Config } from \"tailwindcss\";\n    ` : ''}\nconst config: Config = {\n  darkMode: \"class\",\n  content: [\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/layouts/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/ui/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: {\n        DEFAULT: \"1rem\",\n      },\n    },\n    extend: {\n      colors: {\n        iron: {\n          \"50\": \"#f7f8f8\",\n          \"100\": \"#eeeff0\",\n          \"200\": \"#cad0d3\",\n          \"300\": \"#b6bfc3\",\n          \"400\": \"#8f9ca1\",\n          \"500\": \"#718086\",\n          \"600\": \"#5b686e\",\n          \"700\": \"#4a545a\",\n          \"800\": \"#40484c\",\n          \"900\": \"#383e42\",\n          \"950\": \"#25292c\",\n        },\n        \"deep-cerulean\": {\n          \"50\": \"#f1fafe\",\n          \"100\": \"#e3f2fb\",\n          \"200\": \"#c0e6f7\",\n          \"300\": \"#88d3f1\",\n          \"400\": \"#49bee7\",\n          \"500\": \"#21a6d6\",\n          \"600\": \"#1384b4\",\n          \"700\": \"#116a93\",\n          \"800\": \"#125a7a\",\n          \"900\": \"#154b65\",\n          \"950\": \"#0e3043\",\n        },\n        trinidad: {\n          \"50\": \"#fef6ee\",\n          \"100\": \"#fcecd8\",\n          \"200\": \"#f8d4b0\",\n          \"300\": \"#f3b57e\",\n          \"400\": \"#ed8d4a\",\n          \"500\": \"#e96e26\",\n          \"600\": \"#db561c\",\n          \"700\": \"#b54019\",\n          \"800\": \"#90351c\",\n          \"900\": \"#742e1a\",\n          \"950\": \"#3f140b\",\n        },\n      },\n    },\n  },\n  plugins: [],\n};\nexport default config;\n`;\n\n  await promises.writeFile(`${cwd}/tailwind.config.${typescript ? 'ts' : 'js'}`, tailwindConfig);\n};","import { promises } from 'fs';\n\nexport const scaffoldNextEnv = async (\n  cwd: string,\n): Promise<void> => {\n  const nextEnv = `/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/basic-features/typescript for more information.\n`;\n\n  await promises.writeFile(`${cwd}/next-env.d.ts`, nextEnv);\n};","import { promises } from 'fs';\n\nexport const scaffoldTsConfigJson = async (\n  cwd: string,\n): Promise<void> => {\n  const tsConfigJson = {\n    'compilerOptions': {\n      'allowJs': true,\n      'esModuleInterop': true,\n      'forceConsistentCasingInFileNames': true,\n      'incremental': true,\n      'isolatedModules': true,\n      'jsx': 'preserve',\n      'lib': [\n        'dom',\n        'dom.iterable',\n        'esnext'\n      ],\n      'module': 'esnext',\n      'moduleResolution': 'bundler',\n      'noEmit': true,\n      'resolveJsonModule': true,\n      'skipLibCheck': true,\n      'strict': true,\n      'plugins': [\n        {\n          'name': 'next'\n        }\n      ],\n      'baseUrl': '.',\n      'paths': {\n        '@/*': [\n          'src/*'\n        ]\n      }\n    },\n    'exclude': [\n      'node_modules'\n    ],\n    'include': [\n      'next-env.d.ts',\n      '**/*.ts',\n      '**/*.tsx',\n      '.next/types/**/*.ts'\n    ]\n  };\n\n  await promises.writeFile(`${cwd}/tsconfig.json`, JSON.stringify(tsConfigJson, null, 2));\n};","import type { tScaffoldAnswers } from '@/types/answers';\n\nimport { scaffoldPackageJson, scaffoldPostcssConfig, scaffoldGitIgnore, scaffoldNextConfig, scaffoldTailwind, scaffoldComponentsJson } from '../../generic/config';\nimport { scaffoldNextEnv } from './next-env';\nimport { scaffoldTsConfigJson } from './tsconfig-json';\n\nexport const handleScaffoldConfig = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await scaffoldPackageJson(cwd, answers);\n  await scaffoldGitIgnore(cwd);\n  await scaffoldNextEnv(cwd);\n  await scaffoldNextConfig(cwd, answers.language === 'typescript');\n  await scaffoldPostcssConfig(cwd, answers.styling === 'tailwindcss');\n  await scaffoldTsConfigJson(cwd);\n  await scaffoldTailwind(cwd, answers.styling === 'tailwindcss', answers.language === 'typescript');\n  await scaffoldComponentsJson(cwd, answers);\n};","import type { tScaffoldAnswers } from '@/types/answers';\n\nimport { promises } from 'fs';\nimport { scaffoldApp } from './app';\nimport { scaffoldComponents } from './components';\nimport { scaffoldStyles } from './styles';\nimport { scaffoldHooks } from './hooks';\nimport { scaffoldLayouts } from './layouts';\nimport { scaffoldServer } from './server';\nimport { scaffoldTypes } from './types';\nimport { scaffoldUi } from './ui';\n\nexport const handleScaffoldSrc = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src`);\n\n  await scaffoldApp(`${cwd}`, answers);\n  await scaffoldComponents(`${cwd}`, answers);\n  await scaffoldHooks(`${cwd}`);\n  await scaffoldLayouts(`${cwd}`);\n  await scaffoldServer(`${cwd}`);\n  await scaffoldStyles(`${cwd}`, answers);\n  await scaffoldTypes(`${cwd}`);\n  await scaffoldUi(`${cwd}`, answers);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\nimport { scaffoldAppPage } from './page';\nimport { scaffoldAppLayout } from './layout';\n\nexport const scaffoldApp = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/app`);\n\n  await scaffoldAppPage(`${cwd}`, answers);\n  await scaffoldAppLayout(`${cwd}`, answers); \n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\n\nexport const scaffoldAppPage = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  let page: string = '';\n\n  switch(answers.styling) {\n  case 'tailwindcss':\n    page = `import { Branding } from \"${answers.language === 'typescript' ? '@/' : '../'}ui/branding\";\n\nconst Page = async ()${answers.language === 'typescript' ? ': Promise<JSX.Element>' : ''} => (\n  <div className=\"container\">\n    <div className=\"min-h-screen flex flex-col items-center justify-center gap-5\">\n      <Branding />\n      <h1 className=\"max-w-md text-4xl text-center font-light leading-tight\">\n        Welcome to{\" \"}\n        <span className=\"text-deep-cerulean-500 font-semibold\">\n          Scaffold.Coffee\n        </span>\n      </h1>\n    </div>\n  </div>\n);\n\nexport default Page;`;\n    break;\n  default:\n    page = `import { Branding } from \"${answers.language === 'typescript' ? '@/' : '../'}ui/branding\";\n\nconst Page = async ()${answers.language === 'typescript' ? ': Promise<JSX.Element>' : ''} => (\n  <div className=\"container\">\n    <div className=\"page_wrapper\">\n      <Branding />\n      <h1 className=\"page_title\">\n        Welcome to{\" \"}\n        <span className=\"page_title_highlight\">\n          Scaffold.Coffee\n        </span>\n      </h1>\n    </div>\n  </div>\n);\n\nexport default Page;`;\n    break;\n  }\n\n  await promises.writeFile(`${cwd}/src/app/page.${answers.language === 'typescript' ? 'tsx' : 'jsx'}`, page);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\n\nexport const scaffoldAppLayout = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  let layout: string = '';\n\n  switch(answers.styling) {\n  case 'tailwindcss':\n    layout = `import clsx from \"clsx\";\nimport { GeistSans } from \"geist/font/sans\";${answers.language === 'typescript' ? `\nimport type { Metadata } from \"next\";` : ''}\n\nimport \"${answers.language === 'typescript' ? '@/' : '../'}styles/globals.scss\";\nimport { Theme } from \"${answers.language === 'typescript' ? '@/' : '../'}components/theme\";\n${answers.language === 'typescript' ? `\ninterface Props {\n  children: React.ReactNode;\n}` : ''}\n\nexport const metadata${answers.language === 'typescript' ? ': Metadata' : ''} = {\n  title: {\n    template: \"%s | My Next.js Site\",\n    default: \"My Next.js Site build with Scaffold.Coffee\",\n  },\n};\n\nconst RootLayout = async ({ children }${answers.language === 'typescript' ? ': Props' : ''})${answers.language === 'typescript' ? ': Promise<JSX.Element>' : ''} => (\n  <html lang=\"en\" className=\"h-full\" suppressHydrationWarning>\n    <body\n      className={clsx(\n        \"bg-iron-50 text-iron-600 dark:bg-iron-950 dark:text-iron-400\",\n        GeistSans.className,\n      )}\n    >\n      <Theme>{children}</Theme>\n    </body>\n  </html>\n);\n\nexport default RootLayout;`;\n    break;\n  default:\n    layout = `import clsx from \"clsx\";\nimport { GeistSans } from \"geist/font/sans\";${answers.language === 'typescript' ? `\nimport type { Metadata } from \"next\";` : ''}\n\nimport \"${answers.language === 'typescript' ? '@/' : '../'}styles/globals.${answers.styling === 'css' ? 'css' : 'scss'}\";\nimport { Theme } from \"${answers.language === 'typescript' ? '@/' : '../'}components/theme\";\n${answers.language === 'typescript' ? `\ninterface Props {\n  children: React.ReactNode;\n}` : ''}\n\nexport const metadata${answers.language === 'typescript' ? ': Metadata' : ''} = {\n  title: {\n    template: \"%s | My Next.js Site\",\n    default: \"My Next.js Site build with Scaffold.Coffee\",\n  },\n};\n\nconst RootLayout = async ({ children }${answers.language === 'typescript' ? ': Props' : ''})${answers.language === 'typescript' ? ': Promise<JSX.Element>' : ''} => (\n  <html lang=\"en\" suppressHydrationWarning>\n    <body className={GeistSans.className}>\n      <Theme>{children}</Theme>\n    </body>\n  </html>\n);\n\nexport default RootLayout;`;\n    break;\n  }\n\n  await promises.writeFile(`${cwd}/src/app/layout.${answers.language === 'typescript' ? 'tsx' : 'jsx'}`, layout);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\nimport { scaffoldComponentsTheme } from './theme';\n\nexport const scaffoldComponents = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/components`);\n\n  await scaffoldComponentsTheme(`${cwd}`, answers);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\n\nexport const scaffoldComponentsTheme = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  const theme: string = `\"use client\";\n\nimport { ThemeProvider, useTheme } from \"next-themes\";\nimport { useEffect } from \"react\";\n${answers.language === 'typescript' ? `\ninterface Props {\n  children: React.ReactNode;\n}` : ''}\n\nconst ThemeWatcher = ()${answers.language === 'typescript' ? ': null' : ''} => {\n  const { resolvedTheme, setTheme } = useTheme();\n\n  useEffect(() => {\n    const media = window.matchMedia(\"(prefers-color-scheme: dark)\");\n\n    const onMediaChange = ()${answers.language === 'typescript' ? ': void' : ''} => {\n      const systemTheme = media.matches ? \"dark\" : \"light\";\n      if (resolvedTheme === systemTheme) {\n        setTheme(\"system\");\n      }\n    };\n\n    onMediaChange();\n    media.addEventListener(\"change\", onMediaChange);\n\n    return ()${answers.language === 'typescript' ? ': void' : ''} => {\n      media.removeEventListener(\"change\", onMediaChange);\n    };\n  }, [resolvedTheme, setTheme]);\n\n  return null;\n};\n\nconst Theme = ({ children }${answers.language === 'typescript' ? ': Props' : ''})${answers.language === 'typescript' ? ': JSX.Element' : ''} => (\n  <ThemeProvider attribute=\"class\">\n    <ThemeWatcher />\n    {children}\n  </ThemeProvider>\n);\n\nexport { Theme };\n`;\n  \n  await promises.writeFile(`${cwd}/src/components/theme.${answers.language === 'typescript' ? 'tsx' : 'jsx'}`, theme);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\nimport { scaffoldStylesGlobals } from './globals';\n\nexport const scaffoldStyles = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/styles`);\n\n  await scaffoldStylesGlobals(`${cwd}`, answers);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\n\nexport const scaffoldStylesGlobals = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  let styles: string = '';\n\n  switch (answers.styling) {\n  case 'tailwindcss':\n    styles = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`;\n    break;\n  case 'scss':\n    styles = `html, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.container {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-right: 1rem;\n  padding-left: 1rem;\n}\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n\n.page_wrapper {\n    min-height: 100svh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 5;\n\n    .page_title {\n        max-width: 28rem;\n        font-size: 2.25rem;\n        text-align: center;\n        font-weight: 300;\n        line-height: 1.2;\n\n          .page_title_highlight {\n              color: #21a6d6;\n              font-weight: 500;\n          }\n    }\n}\n`;\n    break;\n  default:\n    styles = `html, body {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\n.container {\n  width: 100%;\n  margin-right: auto;\n  margin-left: auto;\n  padding-right: 1rem;\n  padding-left: 1rem;\n}\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n\n.page_wrapper {\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    gap: 5;\n}\n.page_wrapper .page_title {\n    max-width: 28rem;\n    font-size: 2.25rem;\n    text-align: center;\n    font-weight: 300;\n    line-height: 1.2;\n}\n.page_wrapper .page_title .page_title_highlight {\n    color: #21a6d6;\n    font-weight: 500;\n}\n`;\n  }\n\n  await promises.writeFile(`${cwd}/src/styles/${answers.styling === 'css' ? 'globals.css' : 'globals.scss'}`, styles);\n};","import { promises } from 'fs';\n\nexport const scaffoldHooks = async (\n  cwd: string,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/hooks`);\n};","import { promises } from 'fs';\n\nexport const scaffoldLayouts = async (\n  cwd: string,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/layouts`);\n};","import { promises } from 'fs';\n\nexport const scaffoldServer = async (\n  cwd: string,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/server`);\n};","import { promises } from 'fs';\n\nexport const scaffoldTypes = async (\n  cwd: string,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/types`);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\nimport { scaffoldUiBranding } from './branding';\n\nexport const scaffoldUi = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await promises.mkdir(`${cwd}/src/ui`);\n\n  await scaffoldUiBranding(`${cwd}`, answers);\n};","import type { tScaffoldAnswers } from '@/types/answers';\nimport { promises } from 'fs';\n\nexport const scaffoldUiBranding = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  const content = `${answers.language === 'typescript' ? `interface Props {\n  width?: string;\n  height?: string;\n  className?: string;\n}\n\n` : ''}const Branding = async ({\n  width = \"100\",\n  height = \"58\",\n  className,\n}${answers.language === 'typescript' ? ': Props' : ''})${answers.language === 'typescript' ? ': Promise<JSX.Element>' : ''} => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={width}\n    height={height}\n    fill=\"none\"\n    viewBox=\"0 0 100 58\"\n    className={className}\n  >\n    <path\n      ${answers.styling === 'tailwind' ? 'className=\"fill-deep-cerulean-700\"' : 'fill=\"116a93\"'}\n      d=\"M25.476 55.05c.747.813 2.34 2.543 2.748 2.95.723-.18 23.88-.523 33.375-.74 2.038-.046 4.091-.042 6.105-.39 2.738-.474 4.097-1.339 4.478-1.82H25.476Zm60.442-43.348c-2.36 0-4.714 1.289-5.596 1.933L79.1 8.344l8.954-1.425 5.495 1.12 4.172 3.663 1.017 6.614-4.477 9.972-12.922 11.6-14.755 6.614c.17-.747.672-2.402 1.323-3.053C93.957 31.442 93.55 19.232 93.55 18.316c.407-6.004-6.92-6.614-7.632-6.614Z\"\n    />\n    <path\n      ${answers.styling === 'tailwind' ? 'className=\"fill-iron-950 dark:fill-iron-50\"' : 'fill=\"#25292c\"'}\n      d=\"M88.462 8.547c-3.256.082-6.309 1.527-7.428 2.239h-2.137c.136-.916.876-2.992 2.748-3.968 2.34-1.221 6.105-1.12 6.817-1.12 11.804.306 11.397 9.87 11.397 10.684-1.547 18.48-23.777 29.136-34.698 32.155.474-.848 1.465-2.748 1.628-3.562C97.118 33.615 97.112 17.3 97.112 16.391v-.008c-.713-7.428-7.53-7.836-8.65-7.836Zm-65.41 40.067 1.365-.119 2.908 4.927-3.442.416-.831-5.224Z\"\n    />\n    <path\n      ${answers.styling === 'tailwind' ? 'className=\"fill-deep-cerulean-700\"' : 'fill=\"#116a93\"'}\n      d=\"m23.942 47.961 2.434 6.945-4.452-.356-2.434-6.47 4.452-.119Z\"\n    />\n    <mask\n      id=\"a\"\n      width=\"77\"\n      height=\"56\"\n      x=\"7\"\n      y=\"0\"\n      maskUnits=\"userSpaceOnUse\"\n      style={{ maskType: \"alpha\" }}\n    >\n      <path\n        ${answers.styling === 'tailwind' ? 'className=\"fill-iron-950 dark:fill-iron-50\"' : 'fill=\"#25292c\"'}\n        d=\"M26.596 53.116c-.247-.586-1.66-3.253-5.341-9.362C13.122 30.26 8.155 15.846 7.059 0H83.17c-1.097 15.846-6.063 30.26-14.196 43.754-3.68 6.11-5.094 8.776-5.34 9.362 4.978-.209 13.65-.433 16.992-.083.712.075 1.182.176 1.323.308.284.266-.878.661-1.014.707l-.004.002c-.588.2-1.366.388-2.238.559-1.619.318-3.557.58-5.19.764-1.398.156-2.765.185-4.172.185H20.897c-1.406 0-2.773-.029-4.172-.185-1.632-.183-3.57-.446-5.19-.764-.87-.171-1.65-.36-2.238-.56h-.004c-.135-.047-1.297-.443-1.013-.708.141-.132.611-.233 1.323-.308 3.342-.35 12.014-.126 16.993.083Z\"\n      />\n    </mask>\n    <g mask=\"url(#a)\">\n      <path\n        ${answers.styling === 'tailwind' ? 'className=\"fill-iron-950 dark:fill-iron-50\"' : 'fill=\"#25292c\"'}\n        d=\"M26.596 53.116c-.247-.586-1.66-3.253-5.341-9.362C13.122 30.26 8.155 15.846 7.059 0H83.17c-1.097 15.846-6.063 30.26-14.196 43.754-3.68 6.11-5.094 8.776-5.34 9.362 4.978-.209 13.65-.433 16.992-.083.712.075 1.182.176 1.323.308.284.266-.878.661-1.014.707l-.004.002c-.588.2-1.366.388-2.238.559-1.619.318-3.557.58-5.19.764-1.398.156-2.765.185-4.172.185H20.897c-1.406 0-2.773-.029-4.172-.185-1.632-.183-3.57-.446-5.19-.764-.87-.171-1.65-.36-2.238-.56h-.004c-.135-.047-1.297-.443-1.013-.708.141-.132.611-.233 1.323-.308 3.342-.35 12.014-.126 16.993.083Z\"\n      />\n    </g>\n    <mask\n      id=\"b\"\n      width=\"57\"\n      height=\"50\"\n      x=\"10\"\n      y=\"3\"\n      maskUnits=\"userSpaceOnUse\"\n      style={{ maskType: \"alpha\" }}\n    >\n      <path\n        fill=\"#D87324\"\n        d=\"m48.066 31.544.305-6.92h6.309v6.92h-6.614Zm10.888 21.368-11.295-19.13H59.97v6.31h6.92l-5.902 12.82h-2.035Zm-2.24 0H46.032l1.424-16.28 9.26 16.28Zm-22.588 0-1.018-5.087h11.193l-.204 5.087h-9.971Zm-3.053-5.087h-4.58l1.833 5.087h3.866l-1.12-5.087Zm-1.221-23.811 3.052 21.775h11.804l1.628-21.775H29.852Zm-9.463 0h7.123l1.628 14.653-8.751-14.653Zm5.8 21.775-7.835-21.775 12.515 21.775h-4.68Zm20.554-24.014H29.648l-1.424-9.87h11.701v6.818h7.022l-.204 3.052ZM28.223 9.768h4.478V3.053h-5.19l.713 6.715Zm-1.017 12.007h-8.445L10.925 3.053H25.17l2.035 18.722Z\"\n      />\n    </mask>\n    <g mask=\"url(#b)\">\n      <path\n        ${answers.styling === 'tailwind' ? 'className=\"fill-deep-cerulean-500\"' : 'fill=\"#21a6d6\"'}\n        d=\"m48.066 31.544.305-6.92h6.309v6.92h-6.614Zm10.888 21.368-11.295-19.13H59.97v6.31h6.92l-5.902 12.82h-2.035Zm-2.24 0H46.032l1.424-16.28 9.26 16.28Zm-22.588 0-1.018-5.087h11.193l-.204 5.087h-9.971Zm-3.053-5.087h-4.58l1.833 5.087h3.866l-1.12-5.087Zm-1.221-23.811 3.052 21.775h11.804l1.628-21.775H29.852Zm-9.463 0h7.123l1.628 14.653-8.751-14.653Zm5.8 21.775-7.835-21.775 12.515 21.775h-4.68Zm20.554-24.014H29.648l-1.424-9.87h11.701v6.818h7.022l-.204 3.052ZM28.223 9.768h4.478V3.053h-5.19l.713 6.715Zm-1.017 12.007h-8.445L10.925 3.053H25.17l2.035 18.722Z\"\n      />\n      <path\n        ${answers.styling === 'tailwind' ? 'className=\"fill-deep-cerulean-700\"' : 'fill=\"#116a93\"'}\n        d=\"M11.027 5.698h10.888l2.34 16.077 3.562.61-1.934-19.943-15.873-.509 1.017 3.765Zm19.028 0h-2.442l-.407.102-.407-3.256h6.512v7.428h-3.256V5.698Zm6.513 8.548v8.038l10.684.102.407-4.172-6.818-.407v-6.41l-13.024.305.508 2.442 8.243.102Zm-12.11 12.21h-3.052L19.473 23.2l8.344.102 1.628 6.919.102 8.954h-.611L26.9 36.326l-2.442-9.87Zm1.425 20.046-8.038-22.285v-1.933l10.48 17.705 3.46 6.31-5.902.203Zm15.772 3.358v3.358l2.646.101.814-5.901-12.72.101.815 2.34h8.445Zm-12.82 0h-2.341l-.712-2.239 5.698-.305 1.323 6.105-2.85.102-1.119-3.663Zm14.041-23.2H29.648l-.814-3.257 18.418.102-1.73 22.488h-4.07l1.424-19.333Zm8.14.61h-3.459l.712-3.561 7.021-.407.51 8.75-4.783.102V27.27Zm.916 25.948-5.189-9.87-.102-6.31.916-1.933 10.277 17.909-5.902.203Zm4.58-16.79h-7.734L47.761 34.8l-.713-1.628 13.025-.204 7.02 7.021-3.866 2.34h-6.716v-5.9Z\"\n      />\n    </g>\n    <path\n      ${answers.styling === 'tailwind' ? 'className=\"fill-deep-cerulean-700\"' : 'fill=\"#116a93\"'}\n      d=\"M8.28 15.06 4.617 5.902H.547l-.408-2.85h8.344L12.86 15.06H8.28Zm13.024 37.852L8.89 19.842H4.413l-2.442-2.747h11.193L25.68 52.912h-4.376Z\"\n    />\n    <path\n      ${answers.styling === 'tailwind' ? 'className=\"fill-iron-950 dark:fill-iron-50\"' : 'fill=\"#25292c\"'}\n      d=\"M1.055 15.06h10.48l1.324 2.035H1.97l-.916-2.035ZM2.582 0h6.105l-.305 3.053H.139L2.582 0Z\"\n    />\n  </svg>\n);\n\nexport { Branding };`;\n\n  await promises.writeFile(`${cwd}/src/ui/branding.${answers.language === 'typescript' ? 'tsx' : 'jsx'}`, content);\n};","import ora, { type Ora } from 'ora';\nimport chalk from 'chalk';\n\nimport { tScaffoldAnswers } from '@/types/answers';\nimport { createDir } from '@/utils/dir';\nimport { handleScaffoldConfig } from './config';\nimport { handleScaffoldSrc } from '../generic/src';\nimport { promisify } from 'util';\nimport { exec as execCallback } from 'child_process';\nimport { logger } from '@/utils/logger';\n\nexport const scaffoldNextjsJavascript = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  const spinner: Ora = ora(`Setting up ${chalk.blueBright('Next.js')} with ${chalk.blueBright('JavaScript')}`).start();\n\n  const dir = await createDir(cwd, answers.name).catch((err) => {\n    spinner.fail('Failed to create directory');\n    throw err;\n  });\n\n  if(!dir) {\n    spinner.fail('Failed to create directory');\n    throw new Error('Failed to create directory');\n  }\n\n  const userAnswers = {\n    ...answers,\n    name: dir?.split('/')?.pop()?.trim(),\n  };\n\n  await handleScaffoldConfig(dir, userAnswers).catch((err) => {\n    spinner.fail('Failed to scaffold config');\n    throw err;\n  });\n  await handleScaffoldSrc(dir, userAnswers).catch((err) => {\n    spinner.fail('Failed to scaffold src');\n    throw err;\n  });\n\n  if(answers.install) {\n    spinner.text = 'Installing dependencies';\n    const execPromise = promisify(execCallback);\n\n    const checkPackageManager = async (): Promise<string> => {\n      try {\n        await execPromise('yarn --version');\n        return 'yarn install';\n      } catch {\n        try {\n          await execPromise('pnpm --version');\n          return 'pnpm install';\n        } catch {\n          try {\n            await execPromise('bun --version');\n            return 'bun install';\n          } catch {\n            return 'npm install';\n          }\n        }\n      }\n    };\n\n    const installCommand = await checkPackageManager();\n    await execPromise(installCommand, { cwd: dir });\n    spinner.succeed('Dependencies installed');\n\n    if(!answers.git) {\n      logger.message('');\n    }\n  }\n\n  if (answers.git) {\n    const execPromise = promisify(execCallback);\n\n    spinner.text = 'Initializing git';\n    await execPromise('git init', { cwd: dir });\n    spinner.succeed('Git initialized');\n\n    logger.message('');\n  }\n\n  spinner.succeed(`${chalk.blueBright('Next.js')} with ${chalk.blueBright('JavaScript')} setup complete`);\n};","import type { tScaffoldAnswers } from '@/types/answers';\n\nimport { scaffoldPackageJson, scaffoldPostcssConfig, scaffoldGitIgnore, scaffoldNextConfig, scaffoldTailwind, scaffoldComponentsJson } from '../../generic/config';\n\nexport const handleScaffoldConfig = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  await scaffoldPackageJson(cwd, answers);\n  await scaffoldGitIgnore(cwd);\n  await scaffoldNextConfig(cwd, answers.language === 'typescript');\n  await scaffoldPostcssConfig(cwd, answers.styling === 'tailwindcss');\n  await scaffoldTailwind(cwd, answers.styling === 'tailwindcss', answers.language === 'typescript');\n  await scaffoldComponentsJson(cwd, answers);\n};","import { type tScaffoldAnswers } from '@/types/answers';\nimport { logger } from '@/utils/logger';\nimport { scaffoldNextjsTypescript } from './nextjs/typescript';\nimport { scaffoldNextjsJavascript } from './nextjs/javascript';\n\nexport const handleTemplate = async (\n  cwd: string,\n  answers: tScaffoldAnswers,\n): Promise<void> => {\n  switch (answers.framework?.name) {\n  case 'nextjs':\n    switch (answers.language) {\n    case 'typescript':\n      await scaffoldNextjsTypescript(cwd, answers);\n      break;\n    default:\n      await scaffoldNextjsJavascript(cwd, answers);\n    };\n    break;\n  default:\n    logger.error('Invalid framework provided.');\n    process.exit(1);\n  };\n};"],"mappings":"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","names":["Command","z","Command","chalk","logger","args","resolve","dirname","writeFileSync","readFileSync","existsSync","fileURLToPath","chalk","path","dirname","fileURLToPath","path","dirname","fileURLToPath","fs","__filename","__dirname","getPackageInfo","packagePath","packageJson","promises","__filename","fileURLToPath","__dirname","dirname","fetchRegistry","registryPath","registry","getRegistryFrameworks","version","getPackageInfo","path","data","prompts","string","validatePackageName","name","currentDirName","existsSync","readdirSync","useScaffoldPrompt","cwd","defaultConfig","skip","_a","highlight","text","chalk","currentDirName","newDir","newDirName","updateState","name","trimmedName","registry","getRegistryFrameworks","prompts","validatePackageName","value","existsSync","readdirSync","_","overwrite","logger","framework","language","styling","testing","ui","ora","chalk","existsSync","mkdirSync","readdirSync","rmSync","createDir","cwd","name","dir","promises","scaffoldComponentsJson","cwd","answers","componentsJson","promises","scaffoldGitIgnore","cwd","gitIgnore","promises","scaffoldNextConfig","cwd","typescript","nextConfig","promises","scaffoldPackageJson","cwd","answers","testScript","packageJson","promises","scaffoldPostcssConfig","cwd","tailwind","postcssConfig","promises","scaffoldTailwind","cwd","tailwind","typescript","tailwindConfig","promises","scaffoldNextEnv","cwd","nextEnv","promises","scaffoldTsConfigJson","cwd","tsConfigJson","handleScaffoldConfig","cwd","answers","scaffoldPackageJson","scaffoldGitIgnore","scaffoldNextEnv","scaffoldNextConfig","scaffoldPostcssConfig","scaffoldTsConfigJson","scaffoldTailwind","scaffoldComponentsJson","promises","promises","promises","scaffoldAppPage","cwd","answers","page","promises","scaffoldAppLayout","cwd","answers","layout","scaffoldApp","cwd","answers","promises","scaffoldAppPage","scaffoldAppLayout","promises","promises","scaffoldComponentsTheme","cwd","answers","theme","scaffoldComponents","cwd","answers","promises","scaffoldComponentsTheme","promises","promises","scaffoldStylesGlobals","cwd","answers","styles","scaffoldStyles","cwd","answers","promises","scaffoldStylesGlobals","promises","scaffoldHooks","cwd","promises","scaffoldLayouts","cwd","promises","scaffoldServer","cwd","promises","scaffoldTypes","cwd","promises","promises","scaffoldUiBranding","cwd","answers","content","scaffoldUi","cwd","answers","promises","scaffoldUiBranding","handleScaffoldSrc","cwd","answers","promises","scaffoldApp","scaffoldComponents","scaffoldHooks","scaffoldLayouts","scaffoldServer","scaffoldStyles","scaffoldTypes","scaffoldUi","promisify","execCallback","scaffoldNextjsTypescript","cwd","answers","_a","_b","spinner","ora","chalk","dir","createDir","err","userAnswers","handleScaffoldConfig","handleScaffoldSrc","execPromise","promisify","execCallback","installCommand","logger","ora","chalk","handleScaffoldConfig","cwd","answers","scaffoldPackageJson","scaffoldGitIgnore","scaffoldNextConfig","scaffoldPostcssConfig","scaffoldTailwind","scaffoldComponentsJson","promisify","execCallback","scaffoldNextjsJavascript","cwd","answers","_a","_b","spinner","ora","chalk","dir","createDir","err","userAnswers","handleScaffoldConfig","handleScaffoldSrc","execPromise","promisify","execCallback","installCommand","logger","handleTemplate","cwd","answers","_a","scaffoldNextjsTypescript","scaffoldNextjsJavascript","logger","__filename","fileURLToPath","__dirname","dirname","initOptionsSchema","z","ANSWERS_FILE_PATH","resolve","storeAnswers","answers","writeFileSync","loadStoredAnswers","existsSync","data","readFileSync","scaffold","Command","opts","options","scriptRunningPath","logger","storedAnswers","useScaffoldPrompt","handleTemplate","init","packageInfo","getPackageInfo","program","Command","scaffold"]}